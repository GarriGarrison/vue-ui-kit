{"version":3,"file":"guv-button.stories-dea66a01.js","sources":["../../src/common/hooks/use-mount.ts","../../src/common/mixin/emits.ts","../../src/components/button/guv-button.vue"],"sourcesContent":["import { onMounted, onUnmounted } from 'vue';\nimport type { MountEvent, UnmountEvent } from '../mixin/emits';\n\nexport const useOnMount = (emit: MountEvent & UnmountEvent): void => {\n  onMounted(() => {\n    emit('mount');\n  });\n  onUnmounted(() => {\n    emit('unmount');\n  });\n};\n","// import type { ComponentPublicInstance } from 'vue';\n// import type { VueComponent } from '../types/value';\n\nexport type Mount = 'mount';\nexport type MountEvent = (e: Mount) => void;\n\nexport const onMount = (emit: MountEvent): void => {\n  emit('mount');\n};\n\nexport type Unmount = 'unmount';\nexport type UnmountEvent = (e: Unmount) => void;\n\nexport const onUnmount = (emit: UnmountEvent): void => {\n  emit('unmount');\n};\n\n// export type Focusin = 'focusin';\n// export type FocusinEvent = (e: 'focusin') => void;\n\n// export const onFocusin = (emit: FocusinEvent): void => {\n//   emit('focusin');\n// };\n\n// export type Focusout = (e: 'focusout') => void;\n\n// export const onFocusout = (emit: Focusout): void => {\n//   emit('focusout');\n// };\n\nexport type Click = 'click';\nexport type ClickEvent = (e: Click, event: MouseEvent) => void;\n\nexport const onClick = (emit: ClickEvent, event: MouseEvent): void => {\n  emit('click', event);\n};\n\n// export type Keydown = (e: 'keydown', event: KeyboardEvent) => void;\n\n// export const onKeydown = (emit: Keydown, event: KeyboardEvent): void => {\n//   emit('keydown', event);\n// };\n\n// export type Change<T> = (e: 'change', value: T) => void;\n\n// export const onChange = <T>(emit: Change<T>, value: T): void => {\n//   emit('change', value);\n// };\n\n// export type ModelValueUpdated<T> = (e: 'model-value-updated', value: T) => void;\n\n// export type Update<T> = ((e: 'update:modelValue', value: T) => void) & ModelValueUpdated<T>;\n\n// export const onUpdateModelValue = <T>(emit: Update<T>, value: T): void => {\n//   emit('update:modelValue', value);\n//   emit('model-value-updated', value);\n// };\n\n// export type Search<T> = (e: 'search', query: T) => void;\n\n// export const onSearch = <T>(emit: Search<T>, query: T): void => {\n//   emit('search', query);\n// };\n\n// export type Input<T> = (e: 'input', value: T) => void;\n\n// export const onInput = <T>(emit: Input<T>, value: T): void => {\n//   emit('input', value);\n// };\n\n// export type FileAdd = (e: 'onFileAdd') => void;\n\n// export const onFileAdd = (emit: FileAdd): void => {\n//   emit('onFileAdd');\n// };\n// export type FileRemove = (e: 'onFileRemove') => void;\n\n// export const onFileRemove = (emit: FileRemove): void => {\n//   emit('onFileRemove');\n// };\n\n// export type Close = (e: 'close') => void;\n\n// export const onClose = (emit: Close): void => {\n//   emit('close');\n// };\n\n// export type BeforeEdit = (e: 'beforeEdit', value: unknown) => void;\n\n// export const onBeforeEdit = (emit: BeforeEdit, value: unknown): void => {\n//   emit('beforeEdit', value);\n// };\n\n// export type AfterEdit = (e: 'afterEdit', value: unknown) => void;\n\n// export const onAfterEdit = (emit: AfterEdit, value: unknown): void => {\n//   emit('afterEdit', value);\n// };\n\n// export type BeforeChange = (e: 'beforeChange', value: unknown) => void;\n\n// export const onBeforeChange = (emit: BeforeChange, value: unknown): void => {\n//   emit('beforeChange', value);\n// };\n\n// export type AfterChange = (e: 'afterChange', value: unknown) => void;\n\n// export const onAfterChange = (emit: AfterChange, value: unknown): void => {\n//   emit('afterChange', value);\n// };\n\n// export type Updated = (e: 'updated') => void;\n\n// export const onUpdated = (emit: Updated): void => {\n//   emit('updated');\n// };\n\n// export type Sort = (e: 'sort', value: string) => void;\n\n// export const onSort = (emit: Sort, value: string): void => {\n//   emit('sort', value);\n// };\n\n// export type QueryUpdate = (e: 'queryUpdate', value: string) => void;\n\n// export const onQueryUpdate = (emit: QueryUpdate, value: string): void => {\n//   emit('queryUpdate', value);\n// };\n\n// export type RowClick<T = ComponentPublicInstance> = (\n//   e: 'rowClick',\n//   row: Record<string, unknown>,\n//   rowRef: VueComponent<T> | null,\n// ) => void;\n\n// export const onRowClick = <T = ComponentPublicInstance>(\n//   emit: RowClick<T>,\n//   row: Record<string, unknown>,\n//   rowRef: VueComponent<T> | null,\n// ): void => {\n//   emit('rowClick', row, rowRef);\n// };\n\n// export type DragStart<T> = (e: 'dragStart', value: T) => void;\n\n// export const onDragStart = <T>(emit: DragStart<T>, value: T): void => {\n//   emit('dragStart', value);\n// };\n\n// export type DragEnd<T> = (e: 'dragEnd', value: T) => void;\n\n// export const onDragEnd = <T>(emit: DragEnd<T>, value: T): void => {\n//   emit('dragEnd', value);\n// };\n\n// export type NodeChoose<T> = (e: 'nodeChoose', value: T) => void;\n\n// export const onNodeChoose = <T>(emit: NodeChoose<T>, value: T): void => {\n//   emit('nodeChoose', value);\n// };\n\n// export type NodeCheck<T> = (e: 'nodeCheck', value: T, check: boolean) => void;\n\n// export const onNodeCheck = <T>(emit: NodeCheck<T>, value: T, check: boolean): void => {\n//   emit('nodeCheck', value, check);\n// };\n\n// export type NodeMounted<T> = (e: 'nodeMounted', value: T) => void;\n\n// export const onNodeMounted = <T>(emit: NodeMounted<T>, value: T): void => {\n//   emit('nodeMounted', value);\n// };\n\n// export type UpdateCheckedNodes<T> = (e: 'updateCheckedNodes', value: T) => void;\n\n// export const onUpdateCheckedNodes = <T>(emit: UpdateCheckedNodes<T>, value: T): void => {\n//   emit('updateCheckedNodes', value);\n// };\n\n// export type ChildrenShow = (e: 'childrenShow', id: string, show: boolean) => void;\n\n// export const onChildrenShow = (emit: ChildrenShow, id: string, show: boolean): void => {\n//   emit('childrenShow', id, show);\n// };\n\n// export type UpdatePage = (e: 'update:page', page: number) => void;\n\n// export const onUpdatePage = (emit: UpdatePage, page: number): void => {\n//   emit('update:page', page);\n// };\n","<script setup lang=\"ts\">\nimport { useOnMount } from '@/common/hooks/use-mount';\nimport { onClick } from '@/common/mixin/emits';\nimport type { CommonProps } from '@/common/mixin/props';\n\nexport interface Props extends CommonProps {\n  title?: string;\n  disabled?: boolean;\n  size?: 'default' | 'standard' | 'small';\n}\n\nwithDefaults(defineProps<Props>(), {\n  title: 'Button',\n  disabled: false,\n  size: 'default',\n});\n\nconst emit = defineEmits(['click', 'mount', 'unmount']);\nuseOnMount(emit);\n</script>\n\n<template>\n  <button\n    type=\"button\"\n    class=\"guv-button\"\n    :class=\"{ disabled: disabled, standard: size === 'standard', small: size === 'small' }\"\n    :style=\"style\"\n    :disabled=\"disabled\"\n    @click=\"onClick(emit, $event)\"\n  >\n    <slot name=\"before\" />\n    <slot>\n      {{ title }}\n    </slot>\n    <slot name=\"after\" />\n  </button>\n</template>\n\n<style scoped lang=\"scss\">\n@import '@/assets/variables';\n\n.guv-button {\n  width: 100%;\n  padding: 0.5rem 1rem;\n  color: var(--text);\n  font-size: 1rem;\n  background-color: var(--bg-button, $bg-button);\n  border: 1px solid transparent;\n  border-color: var(--border, $border);\n  border-radius: var(--border-radius, $border-radius);\n  cursor: pointer;\n  text-rendering: auto;\n  transition: background 0.2s;\n\n  &:hover {\n    background: var(--bg-hover, $bg-hover);\n  }\n\n  &:focus,\n  :focus-visible {\n    outline: none;\n  }\n\n  &.disabled {\n    border-color: var(--border-disabled, $border-disabled);\n    opacity: 0.4;\n    pointer-events: none;\n\n    &:hover {\n      background: var(--bg-button, $bg-button);\n    }\n  }\n\n  &.standard {\n    width: 55px;\n    height: 50px;\n  }\n\n  &.small {\n    width: 33px;\n    height: 30px;\n  }\n}\n</style>\n"],"names":["useOnMount","emit","onMounted","onUnmounted","onClick","event","__emit"],"mappings":"wHAGa,MAAAA,EAAcC,GAA0C,CACnEC,EAAU,IAAM,CACdD,EAAK,OAAO,CAAA,CACb,EACDE,EAAY,IAAM,CAChBF,EAAK,SAAS,CAAA,CACf,CACH,ECuBaG,EAAU,CAACH,EAAkBI,IAA4B,CACpEJ,EAAK,QAASI,CAAK,CACrB,8NClBA,MAAMJ,EAAOK,EACb,OAAAN,EAAWC,CAAI;;;;;;;;;;;;;;;;;;;;;;;;;"}